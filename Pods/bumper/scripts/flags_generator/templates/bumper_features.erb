//
//  BumperFeatures.swift
//  Letgo
//
//  GENERATED - DO NOT MODIFY - use flags_generator instead.
// 
//  Copyright Â© 2016 Letgo. All rights reserved.
//

import Foundation
import bumper
#if (RX_BUMPER)
import RxSwift
#endif

extension Bumper  {
    static func initialize() {
        var flags = [BumperFeature.Type]()
        <% @flags.bumperInitClasses.each do |initClass| %>flags.append(<%= initClass %>)
        <% end %>Bumper.initialize(flags)
    } <% @flags.flags.each do |flag| %>

    static var <%= flag.varName %>: <%= flag.varClassName %> {
        guard let value = Bumper.value(for: <%= flag.objectName %>.key) else { return <%= flag.varDefaultCase %> }<% if flag.isBool %>
        return <%= flag.objectName %>(rawValue: value)?.asBool ?? <%= flag.varDefaultCase %><% else %>
        return <%= flag.objectName %>(rawValue: value) ?? <%= flag.varDefaultCase %> <% end %>
    } 

    #if (RX_BUMPER)
    static var <%= flag.varName %>Observable: Observable<<%= flag.varClassName %>> {
        return Bumper.observeValue(for: <%= flag.objectName %>.key).map {<% if flag.isBool %>
            <%= flag.objectName %>(rawValue: $0 ?? "")?.asBool ?? <%= flag.varDefaultCase %><% else %>
            <%= flag.objectName %>(rawValue: $0 ?? "") ?? <%= flag.varDefaultCase %><% end %>
        }
    }
    #endif<% end %>
}

<% @flags.flags.each do |flag| %>
enum <%= flag.objectName %>: String, BumperFeature  {
    case <%= flag.casesParams %>
    static var defaultValue: String { return <%= flag.objectName %><%= flag.defaultCase %>.rawValue }
    static var enumValues: [<%= flag.objectName %>] { return <%= flag.allCases %>}
    static var values: [String] { return enumValues.map{$0.rawValue} }
    static var description: String { return "<%= flag.description %>" } <% if flag.isBool %>
    var asBool: Bool { return self == .yes }<% else %>
    static func fromPosition(_ position: Int) -> <%= flag.objectName %> {
        switch position { <% flag.fromPositionCases.each do |switchCase| %>
            <%= switchCase %><% end %>
            default: return <%= flag.defaultCase %>
        }
    }<% end %>
}
<% end %>
