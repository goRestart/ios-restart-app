# Customise this file, documentation can be found here:
# https://github.com/KrauseFx/fastlane/tree/master/docs
# All available actions: https://github.com/KrauseFx/fastlane/blob/master/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# By default, fastlane will send which actions are used
# No personal data is shared, more information on https://github.com/fastlane/enhancer
# Uncomment the following line to opt out
# opt_out_usage

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.14.0"

default_platform :ios

platform :ios do

  before_all do
    ENV["LG_GITHUB_REPOSITORY"] = "letgoapp/letgo-ios"
  end

  desc "Will clone master, create a new `release-x.x.x` branch from, update the build info, push it and do a deploy of that to crashlytics"
  lane :release do

    lg_dependencies

    base_branch_name = "master"
    Actions.lane_context[SharedValues::RB_INFO_BRANCH_NAME] = "master"
    Actions.lane_context[Actions::SharedValues::RB_GIT_CLONE_TMP_FOLDER] = "tmp_lane_git_clone_folder"

    rb_info_collector(
      ask_for_version_number: true,
    )

    # Clone master branch
    rb_git_clone(
      branch_name: base_branch_name
    )

    # Create locally and remotely the new release branch 'release-x.x.x'
    # This will update the ENV  RB_INFO_BRANCH_NAME to the new created branch
    rb_git_create_branch(
      branch_name: "release-" + Actions.lane_context[Actions::SharedValues::RB_INFO_VERSION_NUMBER],
      repository_path: Actions.lane_context[Actions::SharedValues::RB_GIT_CLONE_TMP_FOLDER]
    )

    deploy_to_crashlitycs
  end

  desc "Will clone the specified branch, update the build info and do a deploy of that to crashlytics"
  lane :beta do
    lg_dependencies

    rb_info_collector(
      ask_for_branch_name: true,
      ask_for_version_number: true,
    )

    rb_git_clone(
      branch_name: Actions.lane_context[Actions::SharedValues::RB_INFO_BRANCH_NAME],
      shallow_clone: true
    )

    lg_update_cars_info
    
    lg_update_taxonomies
    
    lg_strings(repository_path: Actions.lane_context[Actions::SharedValues::RB_GIT_CLONE_TMP_FOLDER] + "/")

    deploy_to_crashlitycs
  end

  desc "Build and distribute build to Crashlytics"
  private_lane :deploy_to_crashlitycs do

    # Update version and build numbers in info.plist (locally)
    # Custom for letgo: will also update the ios-prod.json and ios-devel.json with the new build_number
    rb_update_app_version(
      branch_name: Actions.lane_context[Actions::SharedValues::RB_INFO_BRANCH_NAME],
      version_number: Actions.lane_context[Actions::SharedValues::RB_INFO_VERSION_NUMBER],
      repository_path: Actions.lane_context[Actions::SharedValues::RB_GIT_CLONE_TMP_FOLDER],
      update_json_files: true,
      autoincrement: true
    )

    version_number = Actions.lane_context[Actions::SharedValues::RB_INFO_VERSION_NUMBER]
    build_number = Actions.lane_context[SharedValues::RB_BUILD_NUMBER]
    repository_path = Actions.lane_context[Actions::SharedValues::RB_GIT_CLONE_TMP_FOLDER]

    add_version_badge version_number:version_number, build_number:build_number

    gym(
      workspace: Actions.lane_context[Actions::SharedValues::RB_GIT_CLONE_TMP_FOLDER] + "/" + ENV["XCODE_WORKSPACE"],
      output_directory: Actions.lane_context[Actions::SharedValues::RB_GIT_CLONE_TMP_FOLDER],
      configuration: "Adhoc",
      scheme: "LetGoPROD",
      silent: false,
      clean: true,
      export_xcargs: "-allowProvisioningUpdates",
      export_method: "ad-hoc"
    )

    changelog = "Beta #{version_number}-#{build_number}"

    crashlytics(
      api_token: 'da82303e33e3a2dc304cdccaa4e19dba00334a34',
      build_secret: '964f1bd4540dbfa7d78d93439cf95e216ec156e046a4e46db36778084770ebbe',
      notes: "#{changelog}",
      groups: "letgo-testers"
    )

    # Update the next version number in remote branch
    lg_push(
      repository_path: Actions.lane_context[Actions::SharedValues::RB_GIT_CLONE_TMP_FOLDER],
      version_number: version_number,
      build_number: build_number
    )

    rb_git_clone_clean()

    slack(
      message: "New beta (#{version_number} - #{build_number}) ready @channel :tada:",
      success: true,
      channel: "#ios-develop",  # Optional, by default will post to the default channel configured for the POST URL.
    )

    slack(
      message: "New beta (#{version_number} - #{build_number}) ready @channel :tada:",
      success: true,
      channel: "#ios",  # Optional, by default will post to the default channel configured for the POST URL.
    )
  end

  desc "Build and distribute local code to Crashlytics"
  lane :local_beta do

    version_number = Actions.lane_context[Actions::SharedValues::RB_INFO_VERSION_NUMBER]
    build_number = Actions.lane_context[SharedValues::RB_BUILD_NUMBER]
 
    add_version_badge version_number:version_number, build_number:build_number

    add_badge(shield: "#{version_number}-#{build_number}-blue", dark: true, shield_geometry: "+0+25%", shield_scale: 0.75)
    gym(
      workspace: ENV["XCODE_WORKSPACE"],
      output_directory: "./",
      configuration: "Adhoc",
      scheme: "LetGoPROD",
      silent: false,
      clean: true,
      export_method: "ad-hoc"
    )

    changelog = "Beta #{version_number}-#{build_number}"

    crashlytics(
      api_token: 'da82303e33e3a2dc304cdccaa4e19dba00334a34',
      build_secret: '964f1bd4540dbfa7d78d93439cf95e216ec156e046a4e46db36778084770ebbe',
      notes: "#{changelog}",
      groups: "letgo-testers"
    )

    slack(
      message: "New beta (#{version_number} - #{build_number}) ready @channel :tada:",
      success: true,
      channel: "#ios-develop",  # Optional, by default will post to the default channel configured for the POST URL.
    )

    slack(
      message: "New beta (#{version_number} - #{build_number}) ready @channel :tada:",
      success: true,
      channel: "#ios",  # Optional, by default will post to the default channel configured for the POST URL.
    )
  end


  desc "Deploys a new version to App Store"
  lane :deploy_to_appstore do


    UI.important ("\n\n ‚ö†Ô∏è \nThis lane will build release-x-x-x branch and send it to Apple. \n\n")
    UI.message ("üìù  Before we begin...").cyan

    # Merge release branch into master #manual
    manual_done = ask("Have you merged release branch into master? YOU HAVE TO DO THIS MANUALLY (y/n) = ".yellow)
    if manual_done.nil? || manual_done != "y"
      raise "Please make sure to update master with all the release-fixes!"
    end

    build_configuration = "Release"
    ENV["XCODE_SCHEME"] = "LetGo"

    release_branch = ask("Release branch to deploy (release-x.x.x): ".yellow)

    rb_git_clone(
      branch_name: release_branch,
      clone_single_branch: false,
      shallow_clone: false
    )

    build_number = get_build_number(xcodeproj: ENV["XCODE_WORKSPACE"])

    xcclean

    gym(
      workspace: Actions.lane_context[Actions::SharedValues::RB_GIT_CLONE_TMP_FOLDER] + "/" + ENV["XCODE_WORKSPACE"],
      output_directory: Actions.lane_context[Actions::SharedValues::RB_GIT_CLONE_TMP_FOLDER],
      scheme: ENV["XCODE_SCHEME"],
      configuration: "Release",
      export_xcargs: "-allowProvisioningUpdates",
      include_bitcode: true
    )

    rb_backup_symbols(
      symbols_path: Actions.lane_context[Actions::SharedValues::RB_GIT_CLONE_TMP_FOLDER],
      symbols_build_number: build_number,
      symbols_build_scheme: ENV["XCODE_SCHEME"],
      symbols_backup_path: "./symbols",
      backup_ipa: true
    )
    
    version_number = get_version_number(xcodeproj: ENV["XCODE_WORKSPACE"])
    tag_release tag_name: version_number build_number: build_number  

    # # Send release to itunes connect
    deliver(
      username: "ios-automation@letgo.com",
      app: "986339882",
      skip_screenshots: true,
      skip_metadata: true,
      force: true,  # Set to true to skip PDF verification
      submit_for_review: true,
      automatic_release: false,
      submission_information: {
        export_compliance_encryption_updated: false,
        add_id_info_uses_idfa: true,
        add_id_info_serves_ads: false,
        add_id_info_tracks_install: true,
        add_id_info_tracks_action: true
      }
    )

    rb_git_clone_clean()

    slack(
      message: "New Version uploaded to app store: #{release_branch}",
      success: true,
      channel: "#ios-develop",  # Optional, by default will post to the default channel configured for the POST URL.
    )
  end

  desc "Will update Web Translate It with the new validated strings from google drive, download all the changes from wti and generate all not-yet valid strings on base + localizables file"
  lane :strings do
    lg_strings(
      repository_path: "./",
      mark_unused_strings: false
    )
  end

  desc "Updates strings with wti and cleans un-used ones, then removes the un-used keys from code"
  lane :strings_clean do
    lg_strings(
      repository_path: "./",
      remove_unused_strings: true
    )
    lg_strings(
      repository_path: "./"
    )
  end

  desc "Clean un-used assets"
  lane :assets_clean do
    lg_assets(
      repository_path: "./"
    )
  end

  desc "Clean project"
  lane :clean do
    # update strings and remove un-used ones
    lg_strings(
      repository_path: "./",
      remove_unused_strings: true
    )
    # update strings
    lg_strings(
      repository_path: "./"
    )
    # clean assets
    lg_assets(
      repository_path: "./"
    )
  end

  private_lane :add_version_badge do |options|     
     add_badge(shield: "#{options[:version_number]}-#{options[:build_number]}-blue", dark: true, shield_gravity: "South", no_badge: true)
  end

  desc "Will generate BumperFlags.switf based on the sources json"
  lane :bumper do
    lg_bumper(
      source_json: "./Ambatana/src/Application/bumper_features.json",
      destination_dir: "./Ambatana/src/Manager/FeatureFlags/"
    )
  end

  desc "Will unit test"
  lane :test do
    scan(
      scheme: "LetGoPROD",
      device: "iPhone 6",
      output_style: "rspec",
      output_directory: "./scanresults",
      output_types: "junit,html",
      clean: true,
      skip_slack: true,
      code_coverage: true
      )
  end

  desc "Will UI test"
  lane :ui_test do
    scan(
      scheme: "UITests",
      device: "iPhone 6",
      output_style: "rspec",
      output_directory: "./scanresults",
      output_types: "junit,html",
      clean: true,
      skip_slack: true,
      code_coverage: true
      )
  end

  desc "Will run CI on Jenkins"
  lane :ciJenkins do
    pullRequest = ENV["BRANCH_NAME"].gsub(/[P¬≠R-]/,'')
    puts pullRequest
    lg_github_status(
      gh_pull_request: pullRequest,
      gh_status_finished: false
      )
    testException = nil
    begin
      test
    rescue => ex
      testException = ex
    end
    lg_github_status(
      gh_pull_request: pullRequest,
      gh_status_finished: true,
      scan_results_junit: "./scanresults/report.junit",
      scan_results_url: ENV["GITHUB_STATUS_DETAIL"]
      )
    if testException
      raise testException
    end
  end

  desc "Will run CI unit tests job"
  lane :ci do
    pullRequest = nil
    if !ENV["TEAMCITY_BRANCH"].nil?
      pullRequest = ENV["TEAMCITY_BRANCH"].sub('/merge', '')
    end

    lg_github_status(
      gh_pull_request: pullRequest,
      gh_status_finished: false
      )

    testException = nil
    begin
      test
    rescue => ex
      testException = ex
    end

    lg_github_status(
      gh_pull_request: pullRequest,
      gh_status_finished: true,
      scan_results_junit: "./scanresults/report.junit",
      scan_results_url: ENV["GITHUB_STATUS_DETAIL"]
      )
    if testException
      raise testException
    end
  end

  desc "Will run CI UI tests job"
  lane :ci_ui_tests do
    testException = nil
    begin
      ui_test
    rescue => ex
      testException = ex
    end

    junitResult = "../scanresults/report.junit"

    message = "UI Tests - "
    success = false

    if junitResult.nil?
      message += "No results file provided!"
    elsif !File.file?(junitResult)
      message += "No results file found!"
    end

    hashResult = Crack::XML.parse(File.read(junitResult))
    tests = hashResult['testsuites']['tests']
    failures = hashResult['testsuites']['failures']

    if failures.to_i == 0
      message += "All #{tests} UI tests passed! :tada:"
      success = true
    else
      message += "Failed #{failures} UI tests from a total of #{tests} :warning:"
    end

    slack(
      message: message,
      success: success,
      channel: "#ios-develop",  # Optional, by default will post to the default channel configured for the POST URL.
    )

    if testException
      raise testException
    end
  end

  lane :dependencies do
    lg_dependencies(
      lg_just_info: false
    )
  end

  desc "Tags current branch and pushes to remote"
  private_lane :tag_release do |options|
    add_git_tag(
       tag: options[:tag_name],
       build_number: options[:build_number],
       force: true
    )
    push_git_tags(
       tag: options[:tag_name],
       remote: "origin"
    )
    end

  desc "Builds LetgoGoDev for simulator to export it for automation process"
  lane :make_automation_build do
    timestamp = Time.now.getutc.strftime("_%m_%d_%y_%I_%M_%p")
    output = "/tmp/xcbuild" + timestamp
    channel = '#'+ENV["SLACK_IOS_CORE_CHANNEL"]  
    message = 'Hey, your .app is waiting for you. Zipped in your desktop (I am talking to whoever runned the command). #hastaluego'
    xcbuild(
      workspace: ENV["XCODE_WORKSPACE"],
      scheme: "LetGoDEV",
      configuration: "Debug",
      sdk: "iphonesimulator",
      destionation: "name=iPhone 7,OS=10.2",
      derivedDataPath: output,
      buildlog_path: "build.log"
    )

    zipped_output = "~/Desktop/automation" + timestamp + ".zip"
    sh("zip -r #{zipped_output} #{output}") 
    slack(
    	message: message,
	success: true,
	channel: channel, 
	default_payloads: [],
	icon_url: "https://cdn.iconscout.com/public/images/icon/premium/png-512/bender-robot-bot-technology-machine-34fbb8f5bb91b753-512x512.png"
    )
  end

  after_all do |lane|
    notification(
      title: "Fastlane '#{lane}'",
      message: "finished successfully"
    )
  end

  error do |lane, exception|
    notification(
      title: "Fastlane '#{lane}'",
      message: "Failed: #{exception.message}"
    )
    UI.error "exception: #{exception.message}"
  end
end
