# Customise this file, documentation can be found here:
# https://github.com/KrauseFx/fastlane/tree/master/docs
# All available actions: https://github.com/KrauseFx/fastlane/blob/master/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# By default, fastlane will send which actions are used
# No personal data is shared, more information on https://github.com/fastlane/enhancer
# Uncomment the following line to opt out
# opt_out_usage

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "1.37.0"

default_platform :ios

def stringGeneration(wti_upload, wti_download)
  if wti_upload
    system "ruby ../Scripts/strings_update.rb --wti-upload -i ../"
  elsif wti_download
    system "ruby ../Scripts/strings_update.rb --wti-download -i ../"
  else 
    system "ruby ../Scripts/strings_update.rb --no-wti-download -i ../"
  end
end

platform :ios do
  
  before_all do

  end

  desc "Will clone develop, create a new `release-` branch from, update the build info, push it and do a deploy of that to crashlytics"
  lane :release do

    base_branch_name = "develop"
    Actions.lane_context[SharedValues::RB_INFO_BRANCH_NAME] = "develop"
    Actions.lane_context[Actions::SharedValues::RB_GIT_CLONE_TMP_FOLDER] = "tmp_lane_git_clone_folder"
    
    rb_info_collector(
      ask_for_version_number: true,
    )

    # Clone develop branch
    rb_git_clone(
      branch_name: base_branch_name
    )

    # Create locally and remotely the new release branch 'release-x.x.x'
    # This will update the ENV  RB_INFO_BRANCH_NAME to the new created branch
    rb_git_create_branch(
      branch_name: "release-" + Actions.lane_context[Actions::SharedValues::RB_INFO_VERSION_NUMBER],
      repository_path: Actions.lane_context[Actions::SharedValues::RB_GIT_CLONE_TMP_FOLDER]
    )

    deploy_to_crashlitycs
  end

  desc "Will clone the specified branch, update the build info and do a deploy of that to crashlytics"
  lane :beta do
    
    download_strings

    rb_info_collector(
      ask_for_branch_name: true,
      ask_for_version_number: true,
    )

    rb_git_clone(
      branch_name: Actions.lane_context[Actions::SharedValues::RB_INFO_BRANCH_NAME]
    )

    deploy_to_crashlitycs
  end

  desc "Build and distribute build to Crashlytics"
  private_lane :deploy_to_crashlitycs do

    # Update version and build numbers in info.plist (locally)
    # Custom for letgo: will also update the ios-prod.json and ios-devel.json with the new build_number
    rb_update_app_version(
      branch_name: Actions.lane_context[Actions::SharedValues::RB_INFO_BRANCH_NAME],
      version_number: Actions.lane_context[Actions::SharedValues::RB_INFO_VERSION_NUMBER],
      repository_path: Actions.lane_context[Actions::SharedValues::RB_GIT_CLONE_TMP_FOLDER],
      push_changes: true,
      update_json_files: true,
      autoincrement: true
    )

    gym(
      workspace: Actions.lane_context[Actions::SharedValues::RB_GIT_CLONE_TMP_FOLDER] + "/" + ENV["XCODE_WORKSPACE"],
      output_directory: Actions.lane_context[Actions::SharedValues::RB_GIT_CLONE_TMP_FOLDER],
      configuration: "Adhoc",
      scheme: ENV["XCODE_SCHEME"],
      silent: false,
      clean: true,
      use_legacy_build_api: true
    )

    crashlytics(
      ipa_path: Actions.lane_context[Actions::SharedValues::IPA_OUTPUT_PATH],
      crashlytics_path: "./Crashlytics.framework",
      api_token: 'da82303e33e3a2dc304cdccaa4e19dba00334a34',
      build_secret: '964f1bd4540dbfa7d78d93439cf95e216ec156e046a4e46db36778084770ebbe',
      notes: "Distributed using Fastlane",
      groups: ['letgo-testers']
    )

    #Update the next version number in remote branch
    rb_update_app_version(
      version_number: Actions.lane_context[Actions::SharedValues::RB_INFO_VERSION_NUMBER],
      build_number: Actions.lane_context[Actions::SharedValues::RB_INFO_BUILD_NUMBER],
      repository_path: Actions.lane_context[Actions::SharedValues::RB_GIT_CLONE_TMP_FOLDER],
    )

    rb_git_clone_clean()

    slack(
      message: "New beta (#{version_number} - #{build_number}) ready @channel :tada:",
      success: true,
      channel: "#ios-develop",  # Optional, by default will post to the default channel configured for the POST URL.
    )
  end


  desc "Deploys a new version to App Store"
  lane :deploy_to_appstore do


    Helper.log.info ("\n\n ‚ö†Ô∏è \nThis lane will take a release branch, merge it in master branch, build master and send it to Apple. Be sure to specify the correct version, equal to the release branch of type `release-x.x.x` \n\n").blue
    Helper.log.info ("üìù  Before we begin...").blue

    # Merge release branch into develop #manual
    manual_done = ask("Have you merged release branch into develop? YOU HAVE TO DO THIS MANUALLY (y/n) = ".yellow)
    if manual_done.nil? || manual_done != "y"
      raise "Please make sure to update develop with all the release-fixes!"
    end

    base_branch_name = "master"
    build_configuration = "Release"
    ENV["XCODE_SCHEME"] = "LetGo"

    release_branch = ask("Release branch to deploy (release-x.x.x): ".yellow)

    # Clone master branch
    rb_git_clone(
      branch_name: base_branch_name,
      clone_single_branch: false
    )

    # # Merge release branch into master
    # # If you get merge conflicts, resolve them manually, push changes and re-run the lane
    rb_git_merge(
      from_branch_name: release_branch,
      to_branch_name: base_branch_name,
      repository_path: Actions.lane_context[Actions::SharedValues::RB_GIT_CLONE_TMP_FOLDER],
    )

    build_number = get_build_number(xcodeproj: "LetGo.xcodeproj")

    xcclean

    gym(
      workspace: Actions.lane_context[Actions::SharedValues::RB_GIT_CLONE_TMP_FOLDER] + "/" + ENV["XCODE_WORKSPACE"],
      output_directory: Actions.lane_context[Actions::SharedValues::RB_GIT_CLONE_TMP_FOLDER],
      scheme: ENV["XCODE_SCHEME"],
      configuration: "Release",
      use_legacy_build_api: true
    )
    
    rb_backup_symbols(
      symbols_path: Actions.lane_context[Actions::SharedValues::RB_GIT_CLONE_TMP_FOLDER],
      symbols_build_number: build_number,
      symbols_build_scheme: ENV["XCODE_SCHEME"],
      symbols_backup_path: "./symbols",
      backup_ipa: true
    )

    # # Send release to itunes connect
    deliver(
      force: true, # Set to true to skip PDF verification
      beta: false, # Upload a new version to TestFlight
      skip_deploy: false, # To don't submit the app for review (works with both App Store and beta builds)
      deliver_file_path: './fastlane/deliver',
    )

    # # Pushes the release git tag 
    rb_git_tag(
      tag_name: Actions.lane_context[Actions::SharedValues::RB_INFO_VERSION_NUMBER],
      repository_path: Actions.lane_context[Actions::SharedValues::RB_GIT_CLONE_TMP_FOLDER]
    )

    rb_git_clone_clean()

    slack(
      message: "New Version uploaded to app store: #{release_branch}",
      success: true,
      channel: "#ios-develop",  # Optional, by default will post to the default channel configured for the POST URL.
    )
  end


  lane :upload_strings do
    if !stringGeneration(true, false)
      return -1
    end
  end

  lane :download_strings do
    if !stringGeneration(false, true)
      return -1
    end
  end

  lane :generate_strings do 
    if !stringGeneration(false, false)
      return -1
    end
  end

  after_all do |lane|
    notify "Fastlane finished '#{lane}' successfully" # Mac OS X Notification
  end

  error do |lane, exception|
    puts "exception: #{exception.message}"
  end
end


# More information about multiple platforms in fastlane: https://github.com/KrauseFx/fastlane/blob/master/docs/Platforms.md
# All available actions: https://github.com/KrauseFx/fastlane/blob/master/docs/Actions.md
